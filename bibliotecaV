package main

import (
	"errors"
	"fmt"
	"time"
)

// Libro encapsula la información de los libros de la biblioteca
type Libro struct {
	id              int
	titulo          string
	autor           string
	categoria       string
	isbn            string
	anioPublicacion int
	numPaginas      int
}

// Métodos para encapsular datos de Libro
func (l *Libro) GetTitulo() string {
	return l.titulo
}

func (l *Libro) SetTitulo(titulo string) {
	l.titulo = titulo
}

// Usuario encapsula la información de los usuarios registrados
type Usuario struct {
	id            int
	nombre        string
	apellido      string
	cedula        string
	edad          int
	email         string
	fechaRegistro time.Time
}

// Métodos para encapsular datos de Usuario
func (u *Usuario) GetNombreCompleto() string {
	return fmt.Sprintf("%s %s", u.nombre, u.apellido)
}

// Prestamo encapsula la información de los préstamos realizados
type Prestamo struct {
	id              int
	usuarioID       int
	libroID         int
	fechaPrestamo   time.Time
	fechaDevolucion *time.Time
}

// Interface para gestionar elementos de la biblioteca
type BibliotecaManager interface {
	Listar() error
	Registrar() error
}

// Datos simulados (en memoria)
var libros []Libro
var usuarios []Usuario
var prestamos []Prestamo

func main() {
	// Inicializar datos
	inicializarDatos()

	// Menú principal
	for {
		fmt.Println("\n=== Biblioteca ===")
		fmt.Println("1. Listar libros")
		fmt.Println("2. Registrar usuario")
		fmt.Println("3. Registrar préstamo")
		fmt.Println("4. Registrar devolución")
		fmt.Println("5. Listar usuarios registrados")
		fmt.Println("6. Agregar libro")
		fmt.Println("7. Salir")
		fmt.Print("Seleccione una opción: ")

		var opcion int
		fmt.Scanln(&opcion)

		switch opcion {
		case 1:
			listarLibros()
		case 2:
			registrarUsuario()
		case 3:
			err := registrarPrestamo()
			if err != nil {
				fmt.Printf("Error: %v\n", err)
			}
		case 4:
			err := registrarDevolucion()
			if err != nil {
				fmt.Printf("Error: %v\n", err)
			}
		case 5:
			listarUsuarios()
		case 6:
			agregarLibro()
		case 7:
			fmt.Println("¡Hasta luego!")
			return
		default:
			fmt.Println("Opción no válida, intente nuevamente.")
		}
	}
}

// Inicializa datos de ejemplo
func inicializarDatos() {
	libros = []Libro{
		{id: 1, titulo: "Cien Años de Soledad", autor: "Gabriel García Márquez", categoria: "Novela", isbn: "978-84-376-0494-7", anioPublicacion: 1967, numPaginas: 471},
		{id: 2, titulo: "1984", autor: "George Orwell", categoria: "Ciencia Ficción", isbn: "978-84-7608-749-9", anioPublicacion: 1949, numPaginas: 328},
	}
	usuarios = []Usuario{}
	prestamos = []Prestamo{}
}

// Lista los libros disponibles
func listarLibros() {
	fmt.Println("\nLibros disponibles:")
	for _, libro := range libros {
		fmt.Printf("ID: %d, Título: %s, Autor: %s, Categoría: %s, ISBN: %s, Año: %d, Páginas: %d\n",
			libro.id, libro.titulo, libro.autor, libro.categoria, libro.isbn, libro.anioPublicacion, libro.numPaginas)
	}
}

// Registra un nuevo usuario
func registrarUsuario() {
	var nombre, apellido, cedula, email string
	var edad int

	fmt.Print("Ingrese el nombre del usuario: ")
	fmt.Scanln(&nombre)
	fmt.Print("Ingrese el apellido del usuario: ")
	fmt.Scanln(&apellido)
	fmt.Print("Ingrese el número de cédula: ")
	fmt.Scanln(&cedula)
	fmt.Print("Ingrese la edad: ")
	fmt.Scanln(&edad)
	fmt.Print("Ingrese el email: ")
	fmt.Scanln(&email)

	usuario := Usuario{
		id:            len(usuarios) + 1,
		nombre:        nombre,
		apellido:      apellido,
		cedula:        cedula,
		edad:          edad,
		email:         email,
		fechaRegistro: time.Now(),
	}
	usuarios = append(usuarios, usuario)

	fmt.Println("Usuario registrado exitosamente.")
}

// Registra un nuevo préstamo
func registrarPrestamo() error {
	var usuarioID, libroID int
	fmt.Print("Ingrese el ID del usuario: ")
	fmt.Scanln(&usuarioID)
	fmt.Print("Ingrese el ID del libro: ")
	fmt.Scanln(&libroID)

	// Validar usuario y libro
	if usuarioID < 1 || usuarioID > len(usuarios) {
		return errors.New("usuario no encontrado")
	}
	if libroID < 1 || libroID > len(libros) {
		return errors.New("libro no encontrado")
	}

	prestamo := Prestamo{
		id:            len(prestamos) + 1,
		usuarioID:     usuarioID,
		libroID:       libroID,
		fechaPrestamo: time.Now(),
	}
	prestamos = append(prestamos, prestamo)

	fmt.Println("Préstamo registrado exitosamente.")
	return nil
}

// Registra la devolución de un préstamo
func registrarDevolucion() error {
	var prestamoID int
	fmt.Print("Ingrese el ID del préstamo: ")
	fmt.Scanln(&prestamoID)

	// Buscar el préstamo
	for i, prestamo := range prestamos {
		if prestamo.id == prestamoID {
			fechaDevolucion := time.Now()
			prestamos[i].fechaDevolucion = &fechaDevolucion
			fmt.Println("Devolución registrada exitosamente.")
			return nil
		}
	}

	return errors.New("préstamo no encontrado")
}

// Lista los usuarios registrados
func listarUsuarios() {
	fmt.Println("\nUsuarios registrados:")
	for _, usuario := range usuarios {
		fmt.Printf("ID: %d, Nombre: %s %s, Cédula: %s, Edad: %d, Email: %s, Fecha de Registro: %s\n",
			usuario.id, usuario.nombre, usuario.apellido, usuario.cedula, usuario.edad, usuario.email, usuario.fechaRegistro.Format("2006-01-02"))
	}
}

// Agrega un nuevo libro
func agregarLibro() {
	var titulo, autor, categoria, isbn string
	var anioPublicacion, numPaginas int

	fmt.Print("Ingrese el título del libro: ")
	fmt.Scanln(&titulo)
	fmt.Print("Ingrese el autor del libro: ")
	fmt.Scanln(&autor)
	fmt.Print("Ingrese la categoría del libro: ")
	fmt.Scanln(&categoria)
	fmt.Print("Ingrese el ISBN del libro: ")
	fmt.Scanln(&isbn)
	fmt.Print("Ingrese el año de publicación: ")
	fmt.Scanln(&anioPublicacion)
	fmt.Print("Ingrese el número de páginas: ")
	fmt.Scanln(&numPaginas)

	libro := Libro{
		id:              len(libros) + 1,
		titulo:          titulo,
		autor:           autor,
		categoria:       categoria,
		isbn:            isbn,
		anioPublicacion: anioPublicacion,
		numPaginas:      numPaginas,
	}
	libros = append(libros, libro)

	fmt.Println("Libro agregado exitosamente.")
}
